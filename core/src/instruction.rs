pub enum Instruction {
    System { address: u16 },
    Clear,
    Return,
    Jump { address: u16 },
    Call { address: u16 },
    SkipEqual { x: usize, byte: u8 },
    SkipNotEqual { x: usize, byte: u8 },
    SkipEqualRegister { x: usize, y: usize },
    Load { x: usize, byte: u8 },
    Add { x: usize, byte: u8 },
    LoadRegister { x: usize, y: usize },
    OrRegister { x: usize, y: usize },
    AndRegister { x: usize, y: usize },
    XorRegister { x: usize, y: usize },
    AddRegister { x: usize, y: usize },
    SubtractRegister { x: usize, y: usize },
    ShiftRight { x: usize },
    SubtractReverseRegister { x: usize, y: usize },
    ShiftLeft { x: usize },
    SkipNotEqualRegister { x: usize, y: usize },
    LoadIndex { address: u16 },
    JumpOffset { address: u16 },
    Random { x: usize, byte: u8 },
    Draw { x: usize, y: usize, nibble: u8 },
    SkipKeyPressed { x: usize },
    SkipKeyNotPressed { x: usize },
    LoadDelay { x: usize },
    WaitKeyPress { x: usize },
    SetDelay { x: usize },
    SetSound { x: usize },
    AddIndex { x: usize },
    LoadSprite { x: usize },
    LoadBCD { x: usize },
    StoreRegisters { x: usize },
    LoadRegisters { x: usize },
}

impl Instruction {
    pub fn to_str(&self) -> String {
        match self {
            Instruction::System { address } => format!("SYS {:03X}", address),
            Instruction::Clear => "CLS".to_string(),
            Instruction::Return => "RET".to_string(),
            Instruction::Jump { address } => format!("JP {:03X}", address),
            Instruction::Call { address } => format!("CALL {:03X}", address),
            Instruction::SkipEqual { x, byte } => format!("SE V{}, {:03X}", x, byte),
            Instruction::SkipNotEqual { x, byte } => format!("SNE V{}, {:03X}", x, byte),
            Instruction::SkipEqualRegister { x, y } => format!("SE V{}, V{}", x, y),
            Instruction::Load { x, byte } => format!("LD V{}, {:03X}", byte, x),
            Instruction::Add { x, byte } => format!("ADD V{}, {:03X}", byte, x),
            Instruction::LoadRegister { x, y } => format!("LD V{}, V{}", x, y),
            Instruction::OrRegister { x, y } => format!("OR V{}, V{}", x, y),
            Instruction::AndRegister { x, y } => format!("AND V{}, V{}", x, y),
            Instruction::XorRegister { x, y } => format!("XOR V{}, V{}", x, y),
            Instruction::AddRegister { x, y } => format!("ADD V{}, V{}", x, y),
            Instruction::SubtractRegister { x, y } => format!("SUB V{}, V{}", x, y),
            Instruction::ShiftRight { x } => format!("SHR V{}", x),
            Instruction::SubtractReverseRegister { x, y } => format!("SUBN V{}, V{}", x, y),
            Instruction::ShiftLeft { x } => format!("SHL V{}", x),
            Instruction::SkipNotEqualRegister { x, y } => format!("SNE V{}, V{}", x, y),
            Instruction::LoadIndex { address } => format!("LD I, {:03X}", address),
            Instruction::JumpOffset { address } => format!("JP V0, {:03X}", address),
            Instruction::Random { x, byte } => format!("RND V{}, {:03X}", x, byte),
            Instruction::Draw { x, y, nibble } => format!("DRW V{}, V{}, {}", x, y, nibble),
            Instruction::SkipKeyPressed { x } => format!("SKP V{}", x),
            Instruction::SkipKeyNotPressed { x } => format!("SKNP V{}", x),
            Instruction::LoadDelay { x } => format!("LD V{}, DT", x),
            Instruction::WaitKeyPress { x } => format!("LD V{}, K", x),
            Instruction::SetDelay { x } => format!("LD DT, V{}", x),
            Instruction::SetSound { x } => format!("LD ST, V{}", x),
            Instruction::AddIndex { x } => format!("ADD I, V{}", x),
            Instruction::LoadSprite { x } => format!("LD F, V{}", x),
            Instruction::LoadBCD { x } => format!("LD B, V{}", x),
            Instruction::StoreRegisters { x } => format!("LD [I], V{}", x),
            Instruction::LoadRegisters { x } => format!("LD V{}, [I]", x),
        }
    }
}
